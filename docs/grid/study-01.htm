 <!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-09-15" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2025-02-16" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2025-02-19" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />
<!--
<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/webcat/page-structure/demo-page.css" />
<cript type="module" src="/inc/webcat/page-structure/demo-page.js" ></cript>
-->

<style id="styleTheDocumet">
#theDocument { border : 1px solid silver }
input { width : 3rch }
input[type="number"] { width : 5rch }
#propertyPanel > div { display : none }
#propertyPanel.active > div { display : inline-block }
</style>

<meta name="categories" content="Projext > SVG Editor > Grid" />
<meta name="tags" content="project, SVG, editor, create, element, study, construction, grid" />
<title>Drawing Grid (Projects > SVG Editor > Creating Elements)</title>
<meta name="description" content="This study demonstrates how to create and maintain SVG grid lines" />

</head><body>

<div class="hide-if-hosted">
<h1>Study: Drawing Grid</h1>
<p>Part 1 - Creating cartesian coordinate system axes</p>
</div>

<svg id="theDocument" viewBox="-150,-150,300,300" width="300" height="300" style="touch-action:none">
<g id="grid" stroke="black" stroke-width="1">
</g>
</svg>

<div id="propertyPanel" class="active"><button id="createGrid">Grid</button> <div>
<label>x: <input id="cx" type="text" size="4" value="0" /></label> 
<label>y: <input id="cy" type="text" size="4" value="0" /></label> 
</div></div>

<script id="scriptCreateDrawingGrid" type="module">
for ( const o of propertyPanel.querySelectorAll( "input" )) {
	o.addEventListener( "focus" , evt => { o.setAttribute( "type" , "number" ) } ) ;
	o.addEventListener( "blur" , evt => { o.setAttribute( "type" , "text" ) } ) ;
	}
function drawCrossHair ( evt ) {
	// Convert CSS to SVG coordinates
	let point = theDocument.createSVGPoint( );
	point.x = evt.clientX;
	point.y = evt.clientY;
	point = point.matrixTransform(theDocument.getScreenCTM().inverse());
	// Update GUI
	cx.value = Math.round( point.x );
	cy.value = Math.round( point.y );
	// Get viewbox properties
	const { x: documentLeft, y : documentTop, width : documentWidth, height : documentHeight } = theDocument.viewBox.baseVal;
	// Create or move the x axis
	let line = grid.querySelector( "line.origin.x" ) || (( ) => { 
		const line = document.createElementNS( theDocument.namespaceURI, "line" );
		line.classList.add( "origin", "x" );
		line.setAttribute( "x1" , documentLeft );
		line.setAttribute( "x2" , documentLeft + documentWidth );
		grid.append( line ) ;
		return line ;
		} ) ( );
	line.setAttribute( "y1" , cy.value );
	line.setAttribute( "y2" , cy.value );
	// Create or move the y axis
	line = grid.querySelector( "line.origin.y" ) || (( ) => { 
		const line = document.createElementNS( theDocument.namespaceURI, "line" );
		line.classList.add( "origin", "y" );
		line.setAttribute( "y1" , documentTop );
		line.setAttribute( "y2" , documentTop + documentHeight );
		grid.append( line );
		return line ;
		} ) ( );
	line.setAttribute( "x1" , cx.value );
	line.setAttribute( "x2" , cx.value );
	}
theDocument.addEventListener( "click" , drawCrossHair );
</script>
</body></html>