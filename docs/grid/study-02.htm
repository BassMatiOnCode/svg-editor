 <!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-09-15" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2025-02-16" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2025-02-16" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<!--
<link rel="stylesheet" href="/inc/webcat/page-structure/demo-page.css" />
<cript type="module" src="/inc/webcat/page-structure/demo-page.js" ></cript>
-->

<style id="styleTheDocumet">
#theDocument { border : 1px solid silver }
input { width : 3rch }
input[type="number"] { width : 5rch }
input[type="color"] { width : 22px ; height : 22px }
.toolbar table { display : none }
.toolbar.active table { display : table }
.toolbar.active #gridButton { line-height: 64px; }
.toolbar table button { min-height : 70px }
</style>

<meta name="categories" content="Projext > SVG Editor > Grid" />
<meta name="tags" content="project, SVG, editor, create, element, study, construction, grid" />
<title>Cartesian Drawing Grid (Projects > SVG Editor > Creating Elements)</title>
<meta name="description" content="This study demonstrates how to create and maintain SVG grid lines" />

</head><body>

<!--
The idea is to have two options to create the grid:
1. Enter x, y, dx and dy, then click "create" to create the grid, or
2. click on the SVG document to set x and y and create the grid.
-->

<div class="hide-if-hosted">
<h1>Study: Cartesian Drawing Grid</h1>
<p>Part 2 - Creating the grid lines</p>
</div>

<svg id="theDocument" viewBox="-150,-150,300,300" width="300" height="300" style="touch-action:none">
<g id="grid" stroke="black" stroke-width="1"></g>
<circle r="2"></circle>
</svg>

<table class="toolbar no-borders" id="gridToolbar"><tr>
	<td ><button id="gridButton">Grid</button></td>
	<td><table class="controls"><tr>
		<td><table><tr>
			<td></td>
			<td>offset</td>
			<td>angle</td>
			<td>distance</td>
			<td>emphasis</td>
			<td>color</td>
		</tr><tr>
			<td>x: </td>
			<td><input class="hidden-spinner" id="ox" type="text" size="4" value="0" /></td>
			<td><input class="hidden-spinner" id="ax" type="text" size="4" value="0" min="0" max="360" /></td>
			<td><input class="hidden-spinner" id="dx" type="text" size="4" value="50" min="0" /></td>
			<td><input class="hidden-spinner" id="nx" type="text" size="2" value="5" min="0" /></td>
			<td><input id="cx" type="color" value="#303030" /></td>
		</tr><tr>
			<td>y: </td>
			<td><input class="hidden-spinner" id="oy" type="text" size="4" value="0" /></td>
			<td><input class="hidden-spinner" id="ay" type="text" size="4" value="0" min="0" max="360" /></td>
			<td><input class="hidden-spinner" id="dy" type="text" size="4" value="50" min="0" /></td>
			<td><input class="hidden-spinner" id="ny" type="text" size="2" value="5" min="0" /></td>
			<td><input id="cy" type="color" value="#303030" /></td>
		</tr></table></td>
		<td rowspan="2"><button id="createGridButton">Create</button></td>
	</tr></table></td>
</tr></table>

<script id="scriptCreateDrawingGrid" type="module">
// Get viewport edge coordinates
const 
	documentTop = theDocument.viewBox.baseVal.y ,
	documentRight = theDocument.viewBox.baseVal.width + theDocument.viewBox.baseVal.x ,
	documentBottom = theDocument.viewBox.baseVal.height + theDocument.viewBox.baseVal.top ,
	documentLeft = theDocument.viewBox.baseVal.x ;
function createGridLine( classname, direction, position, min, max, container ) {
	const orthogonal = direction === "x" ? "y" : "x" ;
	const line = document.createElementNS( theDocument.namespaceURI, "line" );
	line.classList.add( classname, direction );
	line.setAttribute( direction + "1" , min );
	line.setAttribute( direction + "2" , max );
	line.setAttribute( orthogonal + "1" , position );
	line.setAttribute( orthogonal + "2" , position );
	container.append( line ) ;
	return line;
	}
function createGridLines( classname, direction, current, delta, limit, min, max, container ) {
	current += delta ;
	const sign = Math.sign( delta );
	const orthogonal = direction === "x" ? "y" : "x" ;
	while ( sign * current < sign * limit ) {
		createGridLine( classname, direction, current, min, max, container );
		current += delta ;
		}
	}
function setupGridCore ( ) {
	function createGridLine(classname, direction, position, min, max, container) {
		const orthogonal = direction === "x" ? "y" : "x";
		const line = document.createElementNS(theDocument.namespaceURI, "line");
		line.classList.add(classname, direction);
		line.setAttribute(direction + "1", min);
		line.setAttribute(direction + "2", max);
		line.setAttribute(orthogonal + "1", position);
		line.setAttribute(orthogonal + "2", position);
		container.append(line);
		return line;
	}
	function createGridLines(classname, direction, current, delta, limit, min, max, container) {
		current += delta;
		const sign = Math.sign(delta);
		const orthogonal = direction === "x" ? "y" : "x";
		while (sign * current < sign * limit) {
			createGridLine(classname, direction, current, min, max, container);
			current += delta;
		}
	}
	// Replace old grid
	const newGrid = document.createElementNS( theDocument.namespaceURI, "g" );
	grid.replaceWith( newGrid );
	globalThis.grid = newGrid;
	newGrid.setAttribute( "stroke" , "silver" );
	newGrid.setAttribute( "stroke-width" , "1" );
	// create horizontal grid lines
	let line = createGridLine( "origin", "x", + cy.value , documentLeft, documentRight, newGrid );
	line.setAttribute( "stroke" , "grey" );
	createGridLines( "gridline", "x", + cy.value , - dy.value, documentTop, documentLeft, documentRight, newGrid );
	createGridLines( "gridline", "x", + cy.value , + dy.value, documentBottom, documentLeft, documentRight, newGrid );
	// create vertical grid lines
	line = createGridLine( "origin", "y", + cx.value , documentTop, documentBottom, newGrid );
	line.setAttribute( "stroke" , "grey" );
	createGridLines( "gridline", "y", + cx.value , - dx.value, documentLeft, documentTop, documentBottom, newGrid );
	createGridLines( "gridline", "y", + cx.value , + dx.value, documentRight, documentTop, documentBottom, newGrid );
	}
let x1 = 0, y1 = 0, x2 = 0, y2 = 0, currentLine = undefined ;
const constructionLineX = document.createElementNS( theDocument.namespaceURI, "line" );
constructionLineX.setAttribute( "stroke", "grey" );
constructionLineX.setAttribute( "stroke-width", "1" );
constructionLineX.id = "gridConstructionLineX" ;
const constructionLineY = document.createElementNS( theDocument.namespaceURI, "line" );
constructionLineY.setAttribute( "stroke", "grey" );
constructionLineY.setAttribute( "stroke-width", "1" );
constructionLineY.id = "gridConstructionLineY" ;
function startLine ( evt ) {
	// set the origin coordinates
	let point = theDocument.createSVGPoint( );
	point.x = evt.clientX;
	point.y = evt.clientY;
	point = point.matrixTransform( theDocument.getScreenCTM( ).inverse( ));
	point.x = Math.round( point.x );
	point.y = Math.round( point.y );
	currentLine.setAttribute( "x1", point.x );
	currentLine.setAttribute( "y1", point.y );
	updateLine( evt );
	theDocument.removeEventListener( "pointerdown" , startLine );
	theDocument.addEventListener( "pointermove" , updateLine );
	theDocument.addEventListener( "pointerup" , finishLine );
	}
function updateLine( evt ) {
	// Update the line end point
	let point = theDocument.createSVGPoint( );
	point.x = evt.clientX;
	point.y = evt.clientY;
	point = point.matrixTransform( theDocument.getScreenCTM( ).inverse( ));
	point.x = Math.round( point.x );
	point.y = Math.round( point.y );
	currentLine.setAttribute( "x2", point.x );
	currentLine.setAttribute( "y2", point.y );
	// Update the UI input elements
	let x1, y1, dx, dy ;
	if ( currentLine === constructionLineX ) {
		x1 = currentLine.x1.baseVal.value ;
		y1 = currentLine.y1.baseVal.value ;
		dx = currentLine.x2.baseVal.value - x1 ;
		dy = currentLine.y2.baseVal.value - y1 ;
		} 
	else if ( currentLine === constructionLineY ) {
		// if we are constructing the y axis, logic is "mirrored"
		dy = currentLine.x2.baseVal.value - currentLine.x1.baseVal.value ;
		dx = currentLine.y2.baseVal.value - currentLine.y1.baseVal.value ;
		}
	const slope = Math.sign( dx ) === 1 && dx < 0.001 ? Number.POSITIVE_INFINITY 
		: Math.sign( dx ) === -1 && dx > -0.001 ? Number.NEGATIVE_INFINITY
		:  dy / dx;  // this is the tangens φ
	// Update the angle input element
	let phi = Math.round( Math.atan( slope ) / Math.PI * 180 );
	if ( dx < 0 ) phi += 180  ;
	else if ( dy < 0 ) phi += 360 ;
	ax.value = phi ;
	// Update axis offset to document origin
	const offset = y1 - slope * x1 ;
	ox.value = offset ;
	}
function finishLine( evt ) {
	updateLine( evt );
	// Calculate the offset and slope for the current axis
	// Next state
	theDocument.removeEventListener( "pointermove" , updateLine );
	theDocument.removeEventListener( "pointerup" , finishLine );
	theDocument.addEventListener( "pointerdown" , startLine );
	}
function gridToolbarElementGotFocus ( evt ) {
	if ( evt.target.getAttribute( "type" ) === "text" && evt.target.classList.contains( "hidden-spinner" )) evt.target.setAttribute( "type", "number" );
	currentLine = ( currentAxis = evt.target.id.endsWith( "x" ) ? "x" :  "y" ) === "x" ? constructionLineX : constructionLineY ;
	
	}
function gridToolbarElementLostFocus ( evt ) {
	if ( evt.target.getAttribute( "type" ) === "number" && evt.target.classList.contains( "hidden-spinner" )) evt.target.setAttribute( "type", "text" );
	currentAxis = "" ;
	}
function setupDialog ( activate ) {
	const eventHandling = `${ activate ? "add" : "remove" }EventListener` ;
	if ( activate ) {
		gridToolbar.querySelector( "[id='ox']" ).focus( );
		gridToolbar.addEventListener( "focus" , gridToolbarElementGotFocus );
		gridToolbar.addEventListener( "blur" , gridToolbarElementLostFocus );
		theDocument.addEventListener( "pointerdown", startLine );
		currentLine = constructionLineX ;
		theDocument.append( constructionLineX );
	} else {
		theDocument.removeEventListener( "pointermove", updateLine );
		theDocument.removeEventListener( "pointerup", finishLine );
		createGridButton.removeEventListener( "click", setupGridCore );
		gridToolbar.removeEventListener( "focus" , gridToolbarElementGotFocus );
		gridToolbar.removeEventListener( "blur" , gridToolbarElementLostFocus );
		constructionLineX.remove( );
		constructionLineY.remove( );
		curentLine = undefined ;
		}
	}
gridButton.addEventListener( "click" , evt => {
	// Activate the grid properties dialog
	evt.preventDefault( );
	evt.stopPropagation( );
	setupDialog( gridToolbar.classList.toggle( "active" ));
	} ) ;
</script>
</body></html>