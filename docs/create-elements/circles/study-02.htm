 <!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-09-15" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2025-02-14" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2025-02-14" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/webcat/page-structure/demo-page.css" />
<script type="module" src="/inc/webcat/page-structure/demo-page.js" ></script>

<style id="styleTheDocumet">
#theDocument {
	border : 1px solid silver ;
	}
</style>

<meta name="categories" content="Projext > SVG Editor > Creating Elements" />
<meta name="tags" content="project, SVG, editor, create, element, study, construction, point" />
<title>Creating Circles V2(Projects > SVG Editor > Creating Elements)</title>
<meta name="description" content="This study demonstrates how to create SVG circle elements with a drag operation." />
<!--
Observations:
1. Finger and pen generate no mousedown and mousemove events.
-->
</head><body>

<div class="hide-if-hosted">
<h1>Study: Creating Circles V2</h1><p class="subtitle">How to create SVG circle elements</p>
</div>

<svg id="theDocument" viewBox="-150,-150,300,300" width="300" height="300">
</svg>

<script id="scriptCreateCircles" type="module">
let circle = undefined ;
let centerpoint = undefined ;
let strokeColor = "blue" ;
let strokeWidth = "1" ;
let fillColor = "white" ;
function createConstructionPoint( evt ) {
	// This function creates the circle element with an initial radius,
	// then registeres the mousemove and mouseup events.
	const pt = theDocument.createSVGPoint( );
	pt.x = evt.clientX ;
	pt.y = evt.clientY ;
	centerpoint = pt.matrixTransform( theDocument.getScreenCTM( ).inverse( ));
	centerpoint.x = Math.round( centerpoint.x );
	centerpoint.y = Math.round( centerpoint.y );
	circle = document.createElementNS( theDocument.namespaceURI, "circle" );
	if ( centerpoint.x !== 0 ) circle.setAttribute( "cx", centerpoint.x );
	if ( centerpoint.y !== 0 ) circle.setAttribute( "cy", centerpoint.y );
	circle.setAttribute( "stroke", "black" );
	circle.setAttribute( "stroke-width", 1 );
	circle.setAttribute( "fill", "none" );
	circle.setAttribute( "r", "5" );
	theDocument.append( circle );
	theDocument.removeEventListener( "mousedown" , createConstructionPoint );
	theDocument.addEventListener( "mousemove" , updateCircle );
	theDocument.addEventListener( "mouseup" , finishCircle );
	}
function updateCircle ( evt ) {
	const pt = theDocument.createSVGPoint( );
	pt.x = evt.clientX ;
	pt.y = evt.clientY ;
	const radiuspoint = pt.matrixTransform( theDocument.getScreenCTM( ).inverse( ));
	radiuspoint.x = Math.round( radiuspoint.x );
	radiuspoint.y = Math.round( radiuspoint.y );
	const radius = Math.sqrt(( radiuspoint.x - centerpoint.x ) ** 2 + ( radiuspoint.y - centerpoint.y ) ** 2 ) ;
	circle.setAttribute( "r" , radius );
	}
function finishCircle ( evt ) { 
	updateCircle( evt );
	circle.setAttribute( "stroke", strokeColor );
	circle.setAttribute( "stroke-width", strokeWidth );
	circle.setAttribute( "fill", fillColor );
	theDocument.removeEventListener( "mousemove" , updateCircle );
	theDocument.removeEventListener( "mouseup" , finishCircle );
	theDocument.addEventListener( "mousedown" , createConstructionPoint );
	} 
theDocument.addEventListener( "mousedown" , createConstructionPoint );
</script>
</body></html>