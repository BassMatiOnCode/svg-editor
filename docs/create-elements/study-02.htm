 <!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-09-15" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2025-02-04" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2025-02-04" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/webcat/page-structure/demo-page.css" />
<script type="module" src="/inc/webcat/page-structure/demo-page.js" ></script>

<style id="styleContextMenu">
div.contextMenuContainer { 
	border : 1px none silver ;
	width : 32px ;
	height : 32px ;
	overflow : visible ;
	}
div.contextMenuContainer > SVG {
	overflow : visible ;
	}
div.contextMenuContainer circle {
	stroke : black ;
	stroke-width : 4px ;
	fill : white ;
	}
div.contextMenuContainer g:not(.disabled) > circle:hover {
	stroke : darkorange ;
	}
div.contextMenuContainer g.active > circle {
	stroke : darkorange ;
	fill : #ffe9cf ;
	}
div.contextMenuContainer text {
	font-family : "Segoe UI", Tahoma, Geneva, Verdana, sans-serif ;
	font-size : 60px ;
	dominant-baseline : central ;
	text-anchor : middle ;
	stroke : none ;
	fill : black ;
	pointer-events : none ;
	}
div.contextMenuContainer g.active > text {
	fill : darkorange ;
	}
</style>

<meta name="categories" content="Projext > SVG Editor > Creating Elements" />
<meta name="tags" content="project, SVG, editor, create, element, study" />
<title>Creating SVG Elements (Projects > SVG Editor > Creating Elements)</title>
<meta name="description" content="" />

</head><body>

<div class="hide-if-hosted">
<h1>Study: Creating SVG Elements</h1><p class="subtitle">How to create basic SVG elements</p>
</div>

<svg id="theDocument" viewBox="-300,-200,600,400" width="600" height="400" style="border:1px solid silver">
	<circle cx="0" cy="0" r="20" fill="red"></circle>
</svg>

<div class="contextMenuContainer" popover><svg id="documentContextMenu" viewBox="-50,-50,100,100" width="32" height="32">
	<g id="menuFile">
		<g id="menuFileOpen"><circle r="45"><title>File Open</title></circle><text>O</text></g>
		<g id="menuFileSave"><circle r="45"><title>File Save</title></circle><text>S</text></g>
		<circle r="45"><title>File</title></circle><text>F</text></g>
	<g data-cmdgroup="create">
		<g data-cmd="circle"><circle r="45"><title>Create Circle</title></circle><text>C</text></g>
		<g data-cmd="line"><circle r="45"><title>Create Line</title></circle><text>L</text></g>
		<g data-cmd="rect"><circle r="45"><title>Create Rectangle</title></circle><text>R</text></g>
		<circle r="45"><title>Create</title></circle><text>C</text></g>
	<g id="menuView">
		<g id="menuViewZoomPlus"><circle r="45"><title>Zoom in</title></circle><text>+</text></g>
		<g id="menuViewZoomMinus"><circle r="45"><title>Zoom out</title></circle><text>&minus;</text></g>
		<circle r="45"><title>View</title></circle><text>V</text></g>
	</svg></div>

<script id="scriptDocumentContextMenu" type="module">

// Determine geometric base values
// TODO: Move definitions into function to increase locality
const buttons = documentContextMenu.children ;
const f = 1.4 ;  // Button spacing factor
const D = Math.round( 2 * buttons[ 0 ].lastElementChild.previousElementSibling.getAttribute( "r" ) * f );  // Minimum distance between button centers
const n = buttons.length ;  // Number of buttons
// Angle between buttons and layout ring radius
const { δ, r0 } = (( ) => { 
	if ( n === 1 ) return { δ : 0 , r0 : 0 } ;
	if ( n === 2 ) return { δ : 180 , r0 : D/2 } ;
	const δ = 360 / n;
	return { δ : δ , r0 : Math.round( D/2 / Math.sin( δ / 360 * Math.PI )) }
	} ) ( ) ;

function showChildButtons( activatedButtonCircle ) {
	// Bail out if the button is already active
	const activatedButton = activatedButtonCircle.parentElement ;
	if ( activatedButton.classList.contains( "active" )) return ;
	// Deactivate active sibling button and hide its children
	const activeSibling = activatedButton.parentElement.querySelector( ".active" );
	if ( activeSibling ) {
		activeSibling.classList.remove( "active" );
		for ( const button of activeSibling.querySelectorAll( "[transform]" )) {
			button.classList.remove( "active" );
			button.removeAttribute( "transform" );  // hide under parent button circle
			}
		}
	// Decorate the activated button.
	activatedButton.classList.add( "active" );
	// Find layout ring number and SVG position (xp, yp) of the activated button.
	// HTML coordinates cannot be used if SVG is scaled with width/height attributes.
	let ring = 0 , group = activatedButtonCircle, xp = 0, yp = 0 ;
	// TODO: Ascending and counting should use parentElement.tagName
	while ( group = group.parentNode.closest( "g" )) {
		ring += 1 ;
		// Extract the CSS transform=translate values
		const { x, y } = group.getAttribute( "transform" ).match( new RegExp( "translate\\((?<x>[\\d-]+),(?<y>[\\d-]+)\\)")).groups ;
		xp += +x ;
		yp += +y ;
		}
	// Activated button angle 
	const φ = Math.atan( yp / xp ) / Math.PI * 180;
	// Radius of layout circle for child buttons
	let r = Math.round( r0 + ring * D );
	// Angle between child buttons
	let δ = Math.atan( D / r ) / Math.PI * 180;
	// Number of child buttons
	const m = activatedButton.children.length - 2 ;  // subtract circle and text
	// Enlarge radius if there are too many buttons
	if ( m * δ > 360 ) {
		δ = 360 / m ;
		r = D / 2 / Math.sin (δ / 2) ;
		}
	// Angle of first child button
	let α = φ - δ * (m - 1) / 2 ;
	// Position child buttons on the layout ring r
	for ( let i = 0 ; i < m ; i += 1 , α += δ ) {
		// Note that translate values are relative to the parent button
		const x = Math.round( r * Math.cos( α / 180 * Math.PI ) - xp );
		const y = Math.round( r * Math.sin( α / 180 * Math.PI ) - yp );
		const button = activatedButton.children[ i ];
		// Add position attribute for debugging purposes
		button.setAttribute( "data-position", `${x}, ${y}, ${α}` );
		console.debug( "Position:" , button.getAttribute( "data-position" ));
		// Move button into position
		button.setAttribute( "transform", `translate(${ x },${ y })` );
		}
	}
function resetMenu ( ) {
	for ( const button of documentContextMenu.querySelectorAll( "g" )) {
		button.removeAttribute( "transform" );
		button.classList.remove( "active" );
		}
	}
documentContextMenu.addEventListener( "click" , evt => {
	const cmdGroup = evt.target.parentElement.parentElement.getAttribute( "data-cmdgroup" );
	const cmd = evt.target.parentElement.getAttribute( "data-cmd" );
	if ( cmd ) document.dispatchEvent( new CustomEvent( cmdGroup || cmd, { detail : { cmd : cmd } } ));
	if ( evt.target.classList.contains( "checkbox" )) {
		evt.target.parentElement.classList.toggle( "active" );
		return;
		}
	else if ( ! evt.target.previousElementSibling ) {
		resetMenu( );
		documentContextMenu.parentElement.hidePopover( );
		}
	else if ( evt.target.tagName === "circle") {
		showChildButtons( evt.target );
		}
	} ) ;
documentContextMenu.parentElement.addEventListener( "toggle" , evt => {
	if ( evt.newState === "closed" ) resetMenu( );
	} ) ;
function documentContextMenuHandler ( evt ) {
	evt.preventDefault( );
	console.debug( evt.pageX, evt.pageY );
	documentContextMenu.parentElement.showPopover( );
	// Position dialog to mouse event location
	const { width, height } = documentContextMenu.getBoundingClientRect( );
	documentContextMenu.parentElement.style.marginLeft = evt.pageX - width / 2 + "px" ;
	documentContextMenu.parentElement.style.marginTop = evt.pageY - height / 2 + "px" ;
	// Place the level 0 buttons on the innermost layout circle
	for ( let i = 0, angle = 0 ; i < n ; i += 1 , angle += δ ) {
		const button = buttons[ i ] ;
		const x = Math.round( r0 * Math.sin( angle / 180 * Math.PI ));
		const y = Math.round( - r0 * Math.cos( angle / 180 * Math.PI ));
		button.setAttribute( "data-position", `${x}, ${y}, ${angle}` );
		const s = `translate(${ x },${ y })` ;
		button.setAttribute( "transform", s );
		}
	} ;
document.addEventListener( "activateDocumentContextMenu", ( ) => {
	console.debug( "Activating documentContextMenuHandler" );
	document.addEventListener( "contextmenu" , documentContextMenuHandler );
	} ) ;
document.addEventListener( "deactivateDocumentContextMenu", ( ) => {
	console.debug( "Deactivating documentContextMenuHandler" );
	document.removeEventListener( "contextmenu" , documentContextMenuHandler );
	} ) ;
// The document context menu is activated automatically
document.dispatchEvent( new Event( "activateDocumentContextMenu" ));

</script>

<script id="scriptCreateElements" type="module">

const points = [ ] ;

function contextMenuHandler( evt ) {
	console.debug( "deactivating create contextMenuHandler" ); 
	document.removeEventListener( "contextmenu", contextMenuHandler );
	document.removeEventListener( "click" , clickHandler );
	document.dispatchEvent( new Event( "activateDocumentContextMenu" ));
	}
function createCircleClickHandler( evt ) {
	const pt = theDocument.createSVGPoint( );
	pt.x = evt.clientX;
	pt.y = evt.clientY;
	const point = pt.matrixTransform( svg.getScreenCTM( ).inverse( ));
	points.push( point );
	if ( points.length === 2 ) {
		const radius = Math.sqrt(( points[ 0 ].x - points[ 1 ].x ) ** 2 + ( points[ 0 ].y - points[ 1 ].y ) ** 2 );
		const circle = document.createElementNS( theDocument.namespaceURI, "circle" );
		circle.setAttribute( "r", radius ) ;
		circle.setAttribute( "cx", points[ 0 ].x );
		circle.setAttribute( "cy", points[ 0 ].y );
		theDocument.appendChild( circle );
		}
	}
document.addEventListener( "create" , evt => {
	document.dispatchEvent( new Event( "deactivateDocumentContextMenu" ));
		document.addEventListener( "contextmenu" , contextMenuHandler );
	switch ( evt.detail.cmd ) {
	case "circle" :
		console.debug( "create circle" );
		requestAnimationFrame( ( ) => { document.addEventListener( "click" , createCircleClickHandler ) } ) ;
		break ;
	case "line" :
		console.debug( "create line" );
		break ;
	case "rect" :
		console.debug( "create rect" );
		break ;
		}
	} ) ;

</script>
</body></html>