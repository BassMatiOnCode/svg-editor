 <!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-09-15" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2025-02-23" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2025-02-23" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<!--
<link rel="stylesheet" href="/inc/webcat/page-structure/demo-page.css" />
<cript type="module" src="/inc/webcat/page-structure/demo-page.js" ></cript>
-->

<style id="styleTheDocumet">
#theDocument { border : 1px solid silver }
</style>

<meta name="categories" content="Projext > SVG Editor > Snap to Geometry" />
<meta name="tags" content="project, SVG, editor, create, element, study, element, geometry, snap" />
<title>Study 3: Detecting Lines (Projects > SVG Editor > Snap and Glue)</title>
<meta name="description" content="This study investigates pointerenter and pointerleave events." />

</head><body>

<div class="hide-if-hosted">
<h1>Study 3: Detecting Lines Under the Pointer</h1>
</div>

<svg id="theDocument" viewBox="-150,-150,300,300" width="300" height="300" style="touch-action:none">
<rect id="r-001" x="-50" y="-20" width="40" height="40" stroke="black" stroke-width="3" fill="white" ></rect>
<circle r="25" id="c-001" stroke="grey" stroke-width="3" fill="none" transform="translate(25,15)" ></circle>
</svg>


<script id="theScript" type="module">
let elementUnderPointer = undefined;
for ( const o of theDocument.querySelectorAll( "*" )) {
	o.addEventListener( "pointerenter" , evt => {
		console.debug( "Pointer enter", evt.target.id );
		elementUnderPointer = evt.target ;
		} ) ;
	o.addEventListener( "pointerleave" , evt => {
		console.debug( "Pointer leave", evt.target.id );
		elementUnderPointer = "undefined" ;
		} ) ;
	o.addEventListener( "pointerdown", evt => {
		let point = theDocument.createSVGPoint( );
		point.x = evt.clientX;
		point.y = evt.clientY;
		point = point.matrixTransform( evt.target.getScreenCTM( ).inverse( ));
		point.x = Math.round( point.x ) ;
		point.y = Math.round( point.y ) ;
		const onStroke = evt.target.isPointInStroke( point );
		console.debug( "Pointer down", evt.target.id, point.x, point.y, onStroke );
		} ) ;
	}
</script>
</body></html>