 <!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-09-15" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2025-02-25" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2025-02-25" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<!--
<link rel="stylesheet" href="/inc/webcat/page-structure/demo-page.css" />
<cript type="module" src="/inc/webcat/page-structure/demo-page.js" ></cript>
-->

<style id="stylesForContainerDocument">
div#messageBox { border : 1px solid silver }
</style>

<style id="stylesForSVGDocument">
#theDocument { border : 1px solid silver }
#theDocument .snap-overlay { display : none ; opacity : 0.7 }
#theDocument.snap-vertex .snap-overlay.vertex { display : initial }
#theDocument.snap-center .snap-overlay.center { display : initial }
#theDocument.snap-midpoint .snap-overlay.mid { display : initial }
#theDocument.snap-stroke .snap-overlay.stroke { display : initial }
</style>

<meta name="categories" content="Projext > SVG Editor > Snap to Geometry" />
<meta name="tags" content="project, SVG, editor, create, element, study, element, geometry, snap" />
<title>Study 10: Snap to Stroke Improvements 2 (Projects > SVG Editor > Snap and Glue)</title>
<meta name="description" content="This study explores coarse samples proximity problems, and their solution." />

</head><body>

<div class="hide-if-hosted">
<h1>10: Snap to Stroke Improvements 2</h1><p class="subtitle">Sample Proximity Problems</p>
</div>

<svg id="theDocument" class="snap-stroke" viewBox="-170,-150,300,300" width="300" height="300" style="touch-action:none">

<rect id="r-001" x="-150" y="-40" width="80" height="60" stroke="black" stroke-width="1" fill="white" ></rect>
<rect class="snap-overlay stroke" data-for="r-001" x="-150" y="-40" width="80" height="60" stroke="transparent" stroke-width="12" fill="none" ></rect>
<circle class="snap-overlay center point" data-for="r-001" cx="-110" cy="-10" r="5" stroke="none" fill="#dbd" ></circle>
<circle class="snap-overlay vertex point" data-for="r-001" cx="-150" cy="-40" r="5" stroke="none" fill="#dbd" ></circle>
<circle class="snap-overlay vertex point" data-for="r-001" cx="-70" cy="-40" r="5" stroke="none" fill="#dbd" ></circle>
<circle class="snap-overlay vertex point" data-for="r-001" cx="-70" cy="20" r="5" stroke="none" fill="#dbd" ></circle>
<circle class="snap-overlay vertex point" data-for="r-001" cx="-150" cy="20" r="5" stroke="none" fill="#dbd" ></circle>
<circle class="snap-overlay mid point" data-for="r-001" cx="-110" cy="-40" r="5" stroke="none" fill="#dbd" ></circle>
<circle class="snap-overlay mid point" data-for="r-001" cx="-70" cy="-10" r="5" stroke="none" fill="#dbd" ></circle>
<circle class="snap-overlay mid point" data-for="r-001" cx="-110" cy="20" r="5" stroke="none" fill="#dbd" ></circle>
<circle class="snap-overlay mid point" data-for="r-001" cx="-150" cy="-10" r="5" stroke="none" fill="#dbd" ></circle>

<circle r="25" id="c-001" stroke="silver" stroke-width="1" fill="none" transform="translate(25,15)" ></circle>
<circle class="snap-overlay stroke" data-for="c-001" cx="25" cy="15" r="25" stroke="transparent" stroke-width="12" fill="none" ></circle>
<circle class="snap-overlay center point" data-for="c-001" cx="25" cy="15" r="20" stroke="none" fill="#dbd" ></circle>

<path id="auxiliaryPointer" d="M 0 -1 v -4 M 1 0 h 4 M 0 1 v 4 M -1 0 h -4" stroke="black" stroke-width="1" fill="none" pointer-events="none"></path>
</svg>

<div id="snapToGeometryDialog" style="user-select:none">
<label><input id="checkSnapCenter" type="checkbox" />center</label> 
<label><input id="checkSnapVertex" type="checkbox" />vertex</label> 
<label><input id="checkSnapMidPoint" type="checkbox" />mid point</label> 
<label><input id="checkSnapStroke" type="checkbox" checked="checked"/>stroke</label> 
</div>

<div id="messageBox" style="min-height:30px ; max-height:100px ; margin-right:1px ; overflow-y:scroll"></div>

<script id="theScript" type="module">
// - - - Track pointer functionality
function trackPrimaryPointer ( evt ) {
	// Move the auxiliary pointer to the position of the primary pointer
	let point = theDocument.createSVGPoint( );
	point.x = evt.clientX ;
	point.y = evt.clientY ;
	point = point.matrixTransform( theDocument.getScreenCTM( ).inverse( ));
	auxiliaryPointer.setAttribute( "transform", `translate( ${ Math.round( point.x ) },${ Math.round( point.y ) } )` );
	} 
theDocument.addEventListener( "pointermove" , trackPrimaryPointer );
// - - - Track path functionality
const strokePath = { } ;  // Coarse samples from a snap-overlay stroke path
function samplePathPoints ( target, parent, name, start, steps, stepLength, color="green" ) {
	// Creates a list of points on the parent object from the path of the target object.
	const points = parent[ name ] = [ ] ;
	for ( let position = start, i = 0 ; i < steps ; i += 1 , position += stepLength ) {
		const p = target.getPointAtLength( position );
		p.position = position ;
		points.push( p );
		}
	}
function trackSnapPath ( evt ) {
	// Determine pointer coordinates
	let pointer = theDocument.createSVGPoint( );
	pointer.x = evt.clientX ;
	pointer.y = evt.clientY ;
	pointer = pointer.matrixTransform( theDocument.getScreenCTM( ).inverse( ));
	const result = {
		distance : Number.MAX_VALUE ,
		point : undefined ,
		index : 0
		} ;
	function searchProximo ( points, result ) {
		for ( let i = 0 ; i < points.length ; i += 1 ) {
			const p = points[ i ] ;
			const d = Math.sqrt( ( pointer.x - p.x) ** 2 + ( pointer.y - p.y ) ** 2 );
			if ( d < result.distance ) { result.distance = d ; result.point = p ; result.index = i } // ; console.debug( "d =", d, p.x, p.y ) }
		}	} ;
	// Coarse run
	searchProximo ( strokePath.points, result );
	const currentPointIndex = result.index ;
	const currentPoint = result.point ;
//	console.debug( "coarse", result.distance, currentPoint.x, currentPoint.y );
	// Fine run previous segment
	if ( false ) {
		let previousPoint ;
		if ( currentPointIndex > 0 ) previousPoint = strokePath.points[ currentPointIndex - 1 ];
		else if ( currentPoin)
		}
	const previousPoint = strokePath.points [ currentPointIndex === 0 ? strokePath.points.length - 1 : currentPointIndex - 1 ] ;
	if ( ! previousPoint.fineScan ) {
		const stepLength = (currentPoint.position - previousPoint.position) / 10 ;
		samplePathPoints ( evt.target, previousPoint, "fineScan", previousPoint.position + stepLength, 9, stepLength );
		}
	searchProximo( previousPoint.fineScan, result );
	// Fine run current interval
	const nextPoint = strokePath.points [ currentPointIndex === strokePath.points.length - 1 ? 0 : currentPointIndex + 1 ] ;
	if ( ! currentPoint.fineScan ) {
		const stepLength = (nextPoint.position - currentPoint.position) / 10 ;
		samplePathPoints ( evt.target, currentPoint, "fineScan", currentPoint.position + stepLength, 9, stepLength );
		}
	if ( currentPoint.fineScan ) searchProximo( currentPoint.fineScan, result );
	// Move the auxiliary pointer to the nearest point on the stoke-path
//	console.debug( "move to", result.point.x, result.point.y );
	auxiliaryPointer.setAttribute( "transform", `translate( ${ Math.round( result.point.x ) },${ Math.round( result.point.y ) } )` );
	}
function samplePointsProximityTest( points, threshold ) {
	for ( const a of points ) for ( const b of points ) {
		const distance = Math.sqrt(( a.x - b.x ) ** 2 + ( a.y - b.y ) ** 2 );
		if ( distance < threshold && a !== b ) {
			a.proximi = a.proximi || [ ] ;
			if ( ! a.proximi.includes( b )) a.proximi.push( b );
			b.proximi = b.proximi || [ ] ;
			if ( ! b.proximi.includes( a )) b.proximi.push( a );
			console.debug( "Proximity", points.indexOf( a ), points.indexOf( b ),  a  );
	}	}	}
// Event handlers to snap-stroke overlays
for ( const o of theDocument.querySelectorAll( ".snap-overlay.stroke" )) {
	o.addEventListener( "pointerenter", evt => { 
		if ( strokePath.target !== evt.target ) {
			strokePath.target = evt.target ;
			// Sample points from the stroke path
			const length = evt.target.getTotalLength( );
			const steps = length / 10 | 0 ;
			const stepLength = length / steps ;
			// Make sure to include end point in the list
			samplePathPoints ( evt.target, strokePath, "points", 0, steps + 1, stepLength, "gray" );  
			strokePath.points[ 0 ].startOfPath = strokePath.points[ strokePath.points.length - 1 ].endOfPath = true;
			samplePointsProximityTest( strokePath.points, stepLength / 2 );
			}
		// Exchange the pointer tracker
		theDocument.removeEventListener( "pointermove" , trackPrimaryPointer );
		evt.target.addEventListener( "pointermove" , trackSnapPath );
		} ) ;
	o.addEventListener( "pointerleave", evt => { 
		// Restore the primary pointer tracker
		theDocument.addEventListener( "pointermove" , trackPrimaryPointer );
		evt.target.removeEventListener( "pointermove" , trackSnapPath );
		} ) ;
	}
// - - - Snap to point functionality
for ( const o of theDocument.querySelectorAll( ".snap-overlay.point" )) {
	o.addEventListener( "pointerenter" , evt => {
		// Pin aux pointer to center of the snap point
		console.debug( "Pointer enter", `${evt.target.className.baseVal} for ${evt.target.getAttribute("data-for")}` );
		theDocument.removeEventListener( "pointermove" , trackPrimaryPointer );
		auxiliaryPointer.setAttribute( "transform", `translate( ${ evt.target.cx.baseVal.value },${ evt.target.cy.baseVal.value } )` );
		} ) ;
	o.addEventListener( "pointerleave" , evt => {
		// Make aux pointer follow the primary pointer again
		console.debug( "Pointer leave", `${evt.target.className.baseVal} for ${evt.target.getAttribute("data-for")}` );
		theDocument.addEventListener( "pointermove" , trackPrimaryPointer );
		trackPrimaryPointer( evt );
		} ) ;
	}
// - - - Other functionality
theDocument.addEventListener( "pointerdown", evt => {
	// Log position of the auxiliary pointer to the message box 
	const matrix = auxiliaryPointer.transform.baseVal.consolidate().matrix ;
	console.debug( "Aux position used:", `${ matrix.e } ${ matrix.f } for ${evt.target.getAttribute("data-for")}` );
	const text = document.createTextNode( `Aux position used: ${ matrix.e } ${ matrix.f } for ${evt.target.getAttribute("data-for")}` );
	messageBox.prepend( document.createElement( "BR" ));
	messageBox.prepend( text );
	} ) ;
checkSnapCenter.addEventListener( "change" , ( ) => theDocument.classList.toggle( "snap-center" )) ;
checkSnapMidPoint.addEventListener( "change" , ( ) => theDocument.classList.toggle( "snap-midpoint" )) ;
checkSnapVertex.addEventListener( "change" , ( ) => theDocument.classList.toggle( "snap-vertex" )) ;
checkSnapStroke.addEventListener( "change" , ( ) => theDocument.classList.toggle( "snap-stroke" )) ;
</script>
</body></html>